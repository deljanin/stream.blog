import { Inter } from 'next/font/google';
import localFont from 'next/font/local';
import './globals.css';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Sheet, SheetTrigger, SheetContent } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import SmoothScrollWrapper from '@/components/ui/smooth-scroll';
import { Separator } from '@/components/ui/separator';
import { createClient } from 'contentful';
import trimString from '@/lib/trimString';
import SearchDialog from '@/components/ui/search-dialog';
import Image from 'next/image';

const sonoma = localFont({
  src: './fonts/LTSonoma.otf',
  variable: '--font-sonoma',
  style: 'normal',
});
const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
});

export const metadata = {
  title: 'Learn programming from 0 to 1',
  description: 'Generated by create next app',
};

const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID,
  accessToken: process.env.CONTENTFUL_ACCESS_KEY,
});

async function SideNav({ topics }) {
  return (
    <div className="hidden border-r bg-muted/40 md:block animate-slide-in-left">
      <div className="flex flex-col gap-2 h-screen sticky top-0">
        {/* Sticky sidebar */}
        <div className="flex flex-shrink-0 items-center border-b px-4 h-[60px] lg:px-6">
          <Link
            href="/"
            className="flex items-center justify-center gap-2 font-semibold">
            <Image
              src="/static/logo.svg"
              alt="logo"
              width={25}
              height={25}
              className="pb-1.5"
            />
            <span className="text-2xl font-sonoma">Vanu Blog</span>
          </Link>
        </div>
        <nav className="px-2 gap-3 text-sm font-medium lg:px-4 flex-grow">
          <ScrollArea className="flex flex-col flex-grow w-full">
            {topics.map((topic) => {
              return (
                <div key={topic.sys.id}>
                  <Link
                    href={`/topics#${topic.fields.title}`}
                    className="font-sonoma flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary">
                    {topic.fields.title}
                  </Link>
                  <Separator />
                  <div className="py-3">
                    {topic.fields.posts?.length > 0 ? (
                      topic.fields.posts.map((post) => (
                        <div key={post.sys.id} className="w-full">
                          <Link
                            href={`/posts/${post.fields.slug}`}
                            className="flex ml-6 pb-3 text-muted-foreground transition-all hover:text-primary">
                            {post.fields.title}
                          </Link>
                        </div>
                      ))
                    ) : (
                      <div className="flex ml-6 pb-3 text-muted-foreground transition-all cursor-default">
                        No posts yet...
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </ScrollArea>
        </nav>
      </div>
    </div>
  );
}
async function TopNav({ topics }) {
  return (
    <header className=" flex h-14 flex-shrink-0 items-center gap-4 border-b bg-muted/40 px-4 lg:h-[60px] lg:px-6 animate-slide-in-top ">
      <Sheet>
        <SheetTrigger asChild>
          <Button variant="outline" size="icon" className="shrink-0 md:hidden">
            <Image src="/static/logo.svg" alt="logo" width={25} height={25} />
          </Button>
        </SheetTrigger>
        <SheetContent side="left" className="flex flex-col">
          <div className="flex flex-col gap-4 border-b p-4 pt-0 lg:h-[60px] lg:px-6">
            <Link href="/" className="flex items-center gap-2 font-semibold">
              <Image
                src="/static/logo.svg"
                alt="logo"
                width={25}
                height={25}
                className="pb-1.5"
              />
              <span className="text-2xl font-sonoma">Vanu Blog</span>
            </Link>

            <Link className="font-semibold" href="/about">
              About
            </Link>
          </div>
          <nav className=" px-2 gap-3 text-lg font-medium lg:px-4">
            <ScrollArea className="flex flex-col flex-grow w-full">
              {topics.map((topic) => {
                return (
                  <div key={topic.sys.id}>
                    <Link
                      href={`/topics#${topic.fields.title}`}
                      className="font-sonoma flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary">
                      {topic.fields.title}
                    </Link>
                    <Separator />
                    <div className="py-3">
                      {topic.fields.posts?.length > 0 ? (
                        topic.fields.posts.map((post) => (
                          <div key={post.sys.id} className="w-full">
                            <Link
                              href={`/posts/${post.fields.slug}`}
                              className="flex ml-6 pb-3 text-muted-foreground transition-all hover:text-primary">
                              {post.fields.title}
                            </Link>
                          </div>
                        ))
                      ) : (
                        <div className="flex ml-6 pb-3 text-muted-foreground transition-all cursor-default">
                          No posts yet...
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </ScrollArea>
          </nav>
        </SheetContent>
      </Sheet>
      {/* Search */}

      <SearchDialog topics={topics} />

      <div className="flex-1 flex items-center justify-end gap-4">
        <Link className="hidden md:block" href="/">
          Home
        </Link>
        <Link className="hidden md:block" href="/topics">
          Topics
        </Link>
        {/* <Link className="hidden md:block" href="/about">
          About
        </Link> */}
      </div>

      {/* Add user commenting in the future and thus add users*/}

      {/* <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="secondary"
            size="icon"
            className="rounded-full">
            <CircleUser className="h-5 w-5" />
            <span className="sr-only">Toggle user menu</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel>My Account</DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuItem>Settings</DropdownMenuItem>

          <DropdownMenuItem>Logout</DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu> */}
      {/* <ThemeSwitcher /> */}
    </header>
  );
}

export default async function RootLayout({ children }) {
  let topics = [];
  try {
    const res = await client.getEntries({
      content_type: 'topic',
    });
    topics = res.items;
    topics.sort(
      (a, b) => new Date(a.sys.createdAt) - new Date(b.sys.createdAt)
    );
  } catch (err) {
    console.error(err);
    topics = []; // Fallback in case of error
  }
  return (
    <html lang="en">
      <body className={`${sonoma.variable} antialiased dark font-inter`}>
        <SmoothScrollWrapper>
          <div className="inset-0 grid w-full md:grid-cols-[280px_1fr]">
            <SideNav topics={topics} />
            <div className="flex flex-col overflow-y-auto pb-16">
              <TopNav topics={topics} />
              <div className="flex flex-col pb-16">{children}</div>
            </div>
          </div>
        </SmoothScrollWrapper>
      </body>
    </html>
  );
}
